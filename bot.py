import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = 'YOUR_TOKEN_HERE'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton("/githelp"), KeyboardButton("/dockerfile node"))
menu_kb.add(KeyboardButton("/gitignore python"), KeyboardButton("/readme"))
menu_kb.add(KeyboardButton("/license mit"), KeyboardButton("/security headers"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DevHelperBot ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üßæ Git: /githelp, /gitignore python, /git reset\n"
        "üê≥ Docker: /dockerfile node, /docker help, /docker compose example\n"
        "üì¶ –ü–∞–∫–µ—Ç—ã: /npm express, /pip flask\n"
        "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã: /readme, /license mit\n"
        "‚ö° Bash: /bash find, /linux disk\n"
        "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: /security headers, /env .env\n",
        reply_markup=menu_kb
    )

# Git
@dp.message_handler(commands=['githelp'])
async def git_help(message: types.Message):
    await message.answer(
        "üìò –¢–æ–ø Git –∫–æ–º–∞–Ω–¥:\n"
        "git init ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n"
        "git add . ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã\n"
        "git commit -m 'msg' ‚Äî –∫–æ–º–º–∏—Ç\n"
        "git push ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        "git pull ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        "git status ‚Äî —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤\n"
        "git log ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
    )

@dp.message_handler(commands=['gitignore'])
async def gitignore(message: types.Message):
    args = message.get_args()
    templates = {
        'python': '__pycache__/\n*.py[cod]\n*.env\n.env\nvenv/\n*.log',
        'node': 'node_modules/\n.env\ndist/\n*.log',
        'php': 'vendor/\n.env\n*.log\n*.cache'
    }
    if args:
        content = templates.get(args.lower())
        if content:
            await message.answer(f"```\n{content}\n```", parse_mode='Markdown')
        else:
            await message.answer("–¢–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π python, node –∏–ª–∏ php")
    else:
        buttons = InlineKeyboardMarkup()
        for tech in templates:
            buttons.add(InlineKeyboardButton(text=tech, callback_data=f"gitignore_{tech}"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:", reply_markup=buttons)

@dp.callback_query_handler(lambda c: c.data.startswith("gitignore_"))
async def process_gitignore_callback(callback_query: types.CallbackQuery):
    tech = callback_query.data.split('_')[1]
    content = {
        'python': '__pycache__/\n*.py[cod]\n*.env\n.env\nvenv/\n*.log',
        'node': 'node_modules/\n.env\ndist/\n*.log',
        'php': 'vendor/\n.env\n*.log\n*.cache'
    }.get(tech)
    await callback_query.message.answer(f"```\n{content}\n```", parse_mode='Markdown')

@dp.message_handler(commands=['git'])
async def git_reset(message: types.Message):
    await message.answer("`git reset` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä—ã:\n- git reset --soft HEAD~1 ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n- git reset --hard ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", parse_mode='Markdown')

# Docker
@dp.message_handler(commands=['dockerfile'])
async def dockerfile_node(message: types.Message):
    args = message.get_args()
    if args == 'node':
        dockerfile_text = (
            "```Dockerfile\n"
            "FROM node:18\n"
            "WORKDIR /app\n"
            "COPY . .\n"
            "RUN npm install\n"
            "CMD [\"npm\", \"start\"]\n"
            "```"
        )
        await message.answer(dockerfile_text, parse_mode='Markdown')

@dp.message_handler(commands=['docker'])
async def docker_help(message: types.Message):
    await message.answer("üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Docker:\n- docker build -t name .\n- docker run -p 80:80 name\n- docker ps -a\n- docker stop <id>\n- docker rm <id>\n- docker rmi <image>")

@dp.message_handler(commands=['docker', 'compose'])
async def docker_compose_example(message: types.Message):
    await message.answer("```yaml\nversion: '3'\nservices:\n  web:\n    image: nginx\n    ports:\n      - '80:80'\n```", parse_mode='Markdown')

# –ü–∞–∫–µ—Ç—ã
@dp.message_handler(commands=['npm'])
async def npm_package(message: types.Message):
    pkg = message.get_args()
    if pkg:
        await message.answer(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–∞ `{pkg}`:\n```bash\nnpm install {pkg}\n```", parse_mode='Markdown')

@dp.message_handler(commands=['pip'])
async def pip_package(message: types.Message):
    pkg = message.get_args()
    if pkg:
        await message.answer(f"üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –ø–∞–∫–µ—Ç–∞ `{pkg}`:\n```bash\npip install {pkg}\n```", parse_mode='Markdown')

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
@dp.message_handler(commands=['readme'])
async def readme_template(message: types.Message):
    await message.answer("```markdown\n# –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n## –û–ø–∏—Å–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n## –£—Å—Ç–∞–Ω–æ–≤–∫–∞\n```bash\ngit clone <repo>\ncd project\npip install -r requirements.txt\n```\n\n## –ó–∞–ø—É—Å–∫\n```bash\npython main.py\n```\n\n## –õ–∏—Ü–µ–Ω–∑–∏—è\nMIT\n```", parse_mode='Markdown')

@dp.message_handler(commands=['license'])
async def license_gen(message: types.Message):
    if message.get_args() == 'mit':
        await message.answer("MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy... (–∏ —Ç.–¥.)")

# Bash & Linux
@dp.message_handler(commands=['bash'])
async def bash_find(message: types.Message):
    if message.get_args() == 'find':
        await message.answer("–ü—Ä–∏–º–µ—Ä—ã `find`:\n- –ù–∞–π—Ç–∏ –≤—Å–µ .py: `find . -name '*.py'`\n- –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã >10–ú–±: `find . -size +10M`", parse_mode='Markdown')

@dp.message_handler(commands=['linux'])
async def linux_disk(message: types.Message):
    if message.get_args() == 'disk':
        await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: `df -h`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: `du -sh *`", parse_mode='Markdown')

# Security
@dp.message_handler(commands=['security'])
async def security_headers(message: types.Message):
    if message.get_args() == 'headers':
        await message.answer("üìå –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏:\n- Content-Security-Policy\n- X-Frame-Options\n- X-Content-Type-Options\n- Strict-Transport-Security")

@dp.message_handler(commands=['env'])
async def env_example(message: types.Message):
    if message.get_args() == '.env':
        await message.answer("```env\nSECRET_KEY=your-secret\nDB_NAME=mydb\nDB_PASS=strongpassword\n```", parse_mode='Markdown')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
